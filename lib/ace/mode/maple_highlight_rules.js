/* ***** BEGIN LICENSE BLOCK *****
 * Distributed under the BSD license:
 *
 * Copyright (c) 2012, Ajax.org B.V.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of Ajax.org B.V. nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * ***** END LICENSE BLOCK ***** */

/* This file was autogenerated from ../maple/syntaxes/maple.json (uuid: ) */
/****************************************************************************************
 * IT MIGHT NOT BE PERFECT ...But it's a good start from an existing *.tmlanguage file. *
 * fileTypes                                                                            *
 ****************************************************************************************/

define(function(require, exports, module) {
"use strict";

var oop = require("../lib/oop");
var TextHighlightRules = require("./text_highlight_rules").TextHighlightRules;

var mapleHighlightRules = function() {
    // regexp must not have capturing parentheses. Use (?:) instead.
    // regexps are ordered -> the first match is used

    this.$rules = {
        start: [{
            token: "keyword.maple",
            regex: /@|\b(?:od|fi|for|from|by|to|in|while|do|end|proc|local|global|options*|description|return|if|then|else|elif|try|catch|finally|module|export|use|uses|break|next|error|assuming|read|save|quit|done|stop|union|minus|intersect|subset|and|or|not|xor|mod|implies)\b/
        }, {
            token: "keyword.preprocessor.maple",
            regex: /\$(?:define|include|undef|ifdef|ifndef|else|elif|endif)\b/
        }, {
            token: "keyword.oprator.maple",
            regex: /&.*?\s+/
        }, {
            token: "storage.modifier.maple",
            regex: /\bstatic\b|\s*(?:seq|depends|uneval|evaln|coerce)/
        }, {
            token: "comment.block.maple",
            regex: /\(\*/,
            push: [{
                token: "comment.block.maple",
                regex: /\*\)/,
                next: "pop"
            }, {
                defaultToken: "comment.block.maple"
            }]
        }, {
            token: "comment.line.maple",
            regex: /#.*?$/
        }, {
            token: "string.maple",
            regex: /"(?:\\.|.)*?"/
        }, {
            token: "string.name.maple",
            regex: /`(?:\\`|.)*?`/
        }, {
            token: "string.unevaled.maple",
            regex: /'.*?'/
        }, {
            token: "constant.language.maple",
            regex: /\b(?:true|false|FAIL|NULL|undefined)\b/
        }, {
            token: "variable.options.maple",
            regex: /\b(?:arrow|autocompile|builtin|cache|call_external|hfloat|inline|load|operator|procname|remember|system|threadsafe|unload|object)\b/
        }, {
            token: "variable.language.maple",
            regex: /\b(?:thisproc|procname|thismodule|_passed|_npassed|_rest|_nrest|_params|_nparams|_options|_noptions|args|nargs)\b/
        }, {
            token: "support.type.maple",
            regex: /\b(?:abstract_rootof|ac_var|algebraic|AlgebraicObject|algext|algfun|algnum|algnumext|And|anticommutative|anyfunc|anyindex|anything|appliable|applied|arctrig|arctrigh|arithop|array|Array|assignable|atomic|attributed|boolean|BooleanOpt|builtin|ByteArray|cache|character|ClosedIdeal|CommAlgebra|commutative|complex|complexcons|composition|const|constant|copyrighted|cubic|cx_infinity|cx_zero|dependent|dictionary|dimension|disjcyc|double|embedded_axis|embedded_imaginary|embedded_real|equation|even|evenfunc|evenodd|expanded|extended_numeric|extended_rational|facint|factorial|filedesc|filename|finite|float|form|fraction|freeof|function|global|hfarray|hfloat|identical|imaginary|implies|indexable|indexed|indexedfun|infinity|integer|intersect|last_name_eval|laurent|linear|list|listlist|literal|local|logical|mathfunc|Matrix|matrix|MatrixPolynomialObject|module|moduledefinition|monomial|MonomialOrder|MVIndex|name|nc_var|neg_infinity|negative|negint|negzero|nested|Non|noncommutative|nonemptylist|nonemptyset|nonnegative|nonnegint|nonposint|nonpositive|nonreal|Not|nothing|numeric|odd|oddfunc|operator|Or|OreAlgebra|package|partition|patfunc|patindex|patlist|permlist|piecewise|point|Point|polynom|PolynomialIdeal|pos_infinity|posint|positive|posneg|poszero|prime|procedure|property|protected|quadratic|quartic|Queue|radalgfun|radalgnum|radext|radfun|radfunext|radical|radnum|radnumext|range|Range|rational|ratpoly|ratseq|real_infinity|realcons|record|relation|RootOf|rtable|satisfies|scalar|SDMPolynom|sequential|series|SERIES|set|sfloat|ShortMonomialOrder|ShortTermOrder|SkewAlgebra|SkewParamAlgebra|SkewPolynomial|specfunc|specified_rootof|specindex|Stack|stack|std|stdlib|string|structure|subset|suffixed|surface|symbol|SymbolicInfinity|symmfunc|table|tabular|taylor|Temperature|TEXT|trig|trigh|truefalse|truefalseFAIL|typefunc|typeindex|undefined|uneval|unit|unit_name|Vector|vector|verification|verify|with_unit|zppoly)\b/
        }]
    }
    
    this.normalizeRules();
};

mapleHighlightRules.metaData = {
    scopeName: "source.maple",
    fileTypes: ["mpl", "mi", "mm"],
    name: "maple"
}


oop.inherits(mapleHighlightRules, TextHighlightRules);

exports.mapleHighlightRules = mapleHighlightRules;
});